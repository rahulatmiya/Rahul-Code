#include "stdafx.h"
#include <iostream>
#include "stdio.h"
using namespace System::Threading;
using namespace std;
using namespace System;
 
// Reading paths for three sprites
 
struct Position
{
    int x;
    int y;
};
 
const int MAX = 5;
const int MAXSPRITES = 3;
struct Sprite
{
    int x;
    int y;
    char sym;
    Position path[MAX];
};
 
Sprite s[MAXSPRITES];
void Show(Sprite s)
{
    Console::SetCursorPosition(s.x,s.y);
    putchar(s.sym);
}
void Hide(Sprite s)
{
    Console::SetCursorPosition(s.x,s.y);
    putchar(' ');
}
 
void ReadPath(Sprite& s)
{
    Console::Clear();
    cout<<"Enter Positions"<<endl;
    for(int i=0 ; i < MAX ; i++)
    {
     cout << "Position "<< i << endl;
     cout << "Enter x coordinate "<<endl;
     cin >> s.path[i].x;
     cout << "Enter y coordinate "<<endl;
     cin >> s.path[i].y;
    }
    Console::Clear();
}
 void WalkPath(Sprite& s)
{
    s.sym = '*';
    for(int i=0;i<MAX;i++)
    {
       s.x = s.path[i].x;
       s.y = s.path[i].y;
       Show(s);
       Thread::Sleep(1000);
       Hide(s);
    }
}
 
void WalkPathParallel(Sprite s[])
{
    for(int i= 0 ; i < MAXSPRITES ; i++)
    {
       s[i].sym = '*';
    }
    for(int i=0;i<MAX;i++)
    {
       for(int j=0 ; j<MAXSPRITES ; j++)
       {
         s[j].x = s[j].path[i].x;
         s[j].y = s[j].path[i].y;
         Show(s[j]); }
         Thread::Sleep(1000);
       for(int j=0 ; j<MAXSPRITES ; j++)
       {
         Hide(s[j]);
       }
    }
}
int main(array<System::String ^> ^args)
{
 for(int j = 0 ; j < MAXSPRITES ;j ++)
 {
    ReadPath(s[j]);
 }
 for(int j = 0 ; j < MAXSPRITES ; j ++)
 {
    WalkPath(s[j]);
 }
 WalkPathParallel(s);
 Console::ReadLine();
 return 0;
}
