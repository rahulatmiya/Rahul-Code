******************************
Admin
******************************

public class StackCaseStudy {
    public static void main(String[] args) {
      AStack s1 = new AStack();
      Client1.useAStack(s1);
      Client.useStack(s1);
      Auditor.audit(s1);
      s1.print();
      LStack s2 = new LStack();
      Client2.useLStack(s2);
      Client.useStack(s2);
      Auditor.audit(s2);
      s1.print();
    }
}

******************************
IStack
******************************

public interface IStack {
    void push(int v);
    int pop();
    void print();
}

******************************
IAuditor
******************************

public interface IAuditor {
    int getPushcount();
    int getPopcount();
    void incrementPushCount();
    void incrementPopCount();
}


******************************
StackAuditor
******************************

public abstract class StackAuditor implements IAuditor{
    protected int pushcount;
    protected int popcount;
    
    @Override
    public int getPushcount() {
        return pushcount;
    }

    @Override
    public int getPopcount() {
        return popcount;
    }
    
    @Override
    public void incrementPushCount(){
        pushcount++;
    }
    
    @Override
    public void incrementPopCount(){
        popcount++;
    }
}


******************************
Client
******************************

public class Client {
    public static void useStack(IStack s){
       
        s.push(10);
        System.out.println("Client pushed 10");
        s.push(20);
        System.out.println("Client pushed 20");
        s.push(30);
        System.out.println("Client pushed 30");
        System.out.println("Client popped "+s.pop());
    
    }   
}


******************************
Auditor
******************************

public class Auditor {
    public static void audit(IAuditor s){
        System.out.println("Entering Auditor");
        System.out.println("Push Count is "+s.getPushcount());
        System.out.println("Pop Count is "+s.getPopcount());
        System.out.println("Leaving Auditor");
    }    
}


******************************
AStack Client
******************************

public class Client1 {
    public static void useAStack(AStack s){
        
        s.push(10);
        System.out.println("Client1 pushed 10");
        s.push(20);
        System.out.println("Client1 pushed 20");
        s.push(30);
        System.out.println("Client1 pushed 30");
        System.out.println("Client1 popped "+s.pop());
        
    }
}


******************************
AStack
******************************

public class AStack extends StackAuditor implements IStack{

    private int[] stk = new int[10];
    private int sp = 10;
    
    @Override
    public void push(int v) {
        incrementPushCount();
        if (sp == 0) {
            System.out.println("Stack Overflow");
        } else {
            sp = sp - 1;
            stk[sp] = v;
        }
    }

    @Override
    public int pop() {
        incrementPopCount();
        int temp = -1;
        if (sp == 10) {
            System.out.println("Stack Underflow");
        } else {
            temp = stk[sp];
            sp = sp + 1;
        }
        return temp;
    }
    
    @Override
    public void print() {
        System.out.println("Printing AStack");
        if (sp == 10) {
            System.out.println("Stack is Empty");
            return;
        }
        for (int i = sp; i < 10; i++) {
            System.out.println(stk[i]);
        }
    }
}


******************************
LStack Client
******************************

public class Client2 {
    public static void useLStack(LStack s){
       
        s.push(10);
        System.out.println("Client2 pushed 10");
        s.push(20);
        System.out.println("Client2 pushed 20");
        s.push(30);
        System.out.println("Client2 pushed 30");
        System.out.println("Client2 popped "+s.pop());
    
    }   
}



******************************
LStack
******************************

public class LStack extends StackAuditor implements IStack{
    private Node head;
    
    @Override
    public void push(int v){
        incrementPushCount();
        head = new Node(v,head); 
    }
    
    @Override
    public int pop(){
        incrementPopCount();
        if(head==null) return -1;
        Node t = head;
        head = head.getNext();
        return t.getV();
    }
    
    @Override
    public void print(){
        System.out.println("Printing LStack");
        Node t = head;
        while(t != null){
            System.out.println(t.getV());
            t = t.getNext();
        }
    }
    
}


******************************
Node
******************************

public class Node {
    private final int v;
    private final Node next;

    public Node(int v, Node next) {
        this.v = v;
        this.next = next;
    }

    public int getV() {
        return v;
    }

    public Node getNext() {
        return next;
    }  
}