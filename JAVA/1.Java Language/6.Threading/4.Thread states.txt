package welcometothreading;

public class LearningThreads {
    
    static Thread m;
    static Thread t1;
    static Work2 t2;
    public static void main(String[] args) throws Exception {
        System.out.println("Welcome to threading");
        m = Thread.currentThread();
        Work1 w1 = new Work1();
        t1 = new Thread(w1);
        System.out.println("State of t1 " + t1.getState());
        t2 = new Work2();
        t1.setName("t1");
        t2.setName("t2");
        System.out.println("State of t2 " + t2.getState());
        System.out.println("Starting Thread t1");
        t1.start();
        System.out.println("State of t1 " + t1.getState());
        t2.start();
        System.out.println("Starting Thread t2");
        System.out.println("State of t2 " + t2.getState());
        Thread t = Thread.currentThread();
        for (int i = 0; i < 5; i++) {
            System.out.println(t.getName() + " says hello " + i);
            try {
                Thread.sleep(1000);
            } catch (Exception ex) {

            }
        }
        System.out.println("Main is going to Sleep for atleast 10 seconds");
        Thread.sleep(10000);
        System.out.println("Main preforming join on t1");
        t1.join();
        System.out.println("State of t1 " + t1.getState());
        System.out.println("State of main " + LearningThreads.m.getState());
        System.out.println("Main performing join on t2");
        t2.join();
        System.out.println("State of t2 " + t2.getState());
        Thread.sleep(5000);
        
      
    }
}

class Work1 implements Runnable {

    @Override
    public void run() {
        Thread t = Thread.currentThread();
        for (int i = 0; i < 10; i++) {
            System.out.println(t.getName() + " says " + " hello " + i);
            System.out.println("t1 says State of main " +
                                LearningThreads.m.getState());
            System.out.println("t1 says State of t1 " + 
                                LearningThreads.t1.getState());
            System.out.println("t1 says State of t2 " + 
                                LearningThreads.t2.getState());
            
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
            }
        }
        System.out.println("State of t1 " + t.getState());
        System.out.println("State of main " + 
                            LearningThreads.m.getState());
        System.out.println("Ending Thread t1");
    }
}

class Work2 extends Thread {

    @Override
    public void run() {
        Thread t = Thread.currentThread();
        for (int i = 0; i < 20; i++) {
            System.out.println(t.getName() + " says " + " hello " + i);
            System.out.println("t2 says State of main " + 
                                LearningThreads.m.getState());
            System.out.println("t2 says State of t1 " + 
                                LearningThreads.t1.getState());
            System.out.println("t2 says State of t2 " + 
                                LearningThreads.t2.getState());
         
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
            }

        }
        System.out.println("State of t2 " + t.getState());
        System.out.println("State of main " + 
                            LearningThreads.m.getState());
        System.out.println("Ending Thread t2");
    }
}