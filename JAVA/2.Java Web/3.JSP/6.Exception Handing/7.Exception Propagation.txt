Index.jsp

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Learning Exceptions</title>
    </head>
    <body>
        <h1> Learning Exceptions - Nested try crossing function boundaries </h1>
        <ul> 
            <h2>Creating FunctionBoundary Instance </h2>
            <jsp:useBean id="fb" class="com.rpise.FunctionBoundary" />
            <li>
                <h3> flag1 => false  and flag2 => false </h3>
                <jsp:setProperty name="fb" property="c" value="false,false"/>
                 <jsp:getProperty name="fb" property="output" />
            </li>     
             <li>
                <h3> flag1 => false  and flag2 => true </h3>
                  <jsp:setProperty name="fb" property="c" value="false,true"/>
                 <jsp:getProperty name="fb" property="output" />
            </li>     
             <li>
                <h3> flag1 => true  and flag2 => false </h3>
                 <jsp:setProperty name="fb" property="c" value="true,false"/>
                 <jsp:getProperty name="fb" property="output" />
            </li>     
             <li>
                <h3> flag1 => true  and flag2 => true </h3>
                 <jsp:setProperty name="fb" property="c" value="true,true"/>
                 <jsp:getProperty name="fb" property="output" />
            </li>     
        </ul>
        <h3> Good bye </h3>
    </body>
</html>





FunctionBoundary Class


package com.rpise;

import java.util.StringTokenizer;

/*
 * @author Rajesh Patkar
 */
public class FunctionBoundary {

    private String output = "";
    private boolean flag1;
    private boolean flag2;

    /* ReadOnly Property */
    public String getOutput() {
        return output;
    }

    /* WriteOnly Property */
    public void setC(String s) {
        StringTokenizer st = new StringTokenizer(s, ",");
        flag1 = Boolean.parseBoolean(st.nextToken());
        flag2 = Boolean.parseBoolean(st.nextToken());
        output = "";
        client1();
    }

    void client1() {
        output += "<p> Entering Client1 </p>";
        try {
            output += "<p>Entering Outer try</p>";
            client2();
            output += "<p> Leaving Outer try</p>";
        } catch (ArrayIndexOutOfBoundsException e) {
            output += "<p>Array Bounds Violation</p>";
        } finally {
            output += "<p>In finally of Outer try</p>";
        }
        output += "<p> Leaving Client1 </p>";
    }

    void client2() {
        output += "<p>Entering Client2</p>";
        try {
            output += "<p> Entering Inner try </p>";
            if (flag1) {
                int a = 1;
                int b = 2;
                int c = 0;
                a = b / c;
            }
            output += "<p>Median</p>";
            if (flag2) {
                int[] arr = new int[10];
                arr[45] = 90;
            }
            output += "<p>Leaving Inner try</p>";
        } catch (ArithmeticException e) {
            output += "<p>Divide By Zero</p>";
        } finally {
            output += "<p> In finally of inner try </p>";
        }
        output += "<p>Leaving Client2</p>";
    }
}